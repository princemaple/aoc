# AoC 2015 Day 1

```elixir
Mix.install([:kino])

defmodule Utils do
  def split(line, sep \\ "") do
    String.split(line, sep, trim: true)
  end

  def split_all_lines(text, sep \\ "") do
    text
    |> String.split("\n", trim: true)
    |> Enum.map(&split(&1, sep))
  end

  def to_numbers(number) when is_binary(number) do
    String.to_integer(number)
  end

  def to_numbers(numbers) when is_list(numbers) do
    Enum.map(numbers, &to_numbers/1)
  end

  def to_matrix(text, sep \\ "") do
    text
    |> split_all_lines(sep)
    |> then(fn data ->
      for {row, r} <- Enum.with_index(data), {col, c} <- Enum.with_index(row) do
        {{r, c}, col}
      end
    end)
    |> Map.new()
  end
end
```

## Setup

```elixir
import Utils
```

```elixir
input = Kino.Input.textarea("Input:")
```

```elixir
text = Kino.Input.read(input)
```

```elixir
data = split_all_lines(text, "x") |> to_numbers()
```

## P1

```elixir
for [l, w, h] <- data do
  sides = [l * w, l * h, w * h]
  slack = Enum.min(sides)
  Enum.sum(sides) * 2 + slack
end
|> Enum.sum()
```

## P2

```elixir
for [l, w, h] = sides <- data do
  bow = l * w * h
  rect = (sides -- [Enum.max(sides)]) |> Enum.sum() |> Kernel.*(2)
  bow + rect
end
|> Enum.sum()
```
