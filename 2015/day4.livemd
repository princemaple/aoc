# AoC 2015 Day 4

```elixir
Mix.install([:kino])

defmodule Utils do
  def split(line, sep \\ "") do
    String.split(line, sep, trim: true)
  end

  def split_all_lines(text, sep \\ "") do
    text
    |> String.split("\n", trim: true)
    |> Enum.map(&split(&1, sep))
  end

  def to_numbers(number) when is_binary(number) do
    String.to_integer(number)
  end

  def to_numbers(numbers) when is_list(numbers) do
    Enum.map(numbers, &to_numbers/1)
  end

  def to_matrix(text, sep \\ "") do
    text
    |> split_all_lines(sep)
    |> then(fn data ->
      for {row, r} <- Enum.with_index(data), {col, c} <- Enum.with_index(row) do
        {{r, c}, col}
      end
    end)
    |> Map.new()
  end
end
```

## Setup

```elixir
import Utils
```

```elixir
input = Kino.Input.textarea("Input:")
```

```elixir
text = Kino.Input.read(input)
```

## P1

```elixir
defmodule P1 do
  def solve(text) do
    1..9_999_999
    |> Enum.find(&yeah?(text, &1))
  end

  defp yeah?(key, num) do
    for(<<byte <- :erlang.md5("#{key}#{num}")>>, do: byte)
    |> case do
      [0, 0, x | _] when x < 16 -> true
      _ -> false
    end
  end
end

P1.solve(text)
```

## P2

```elixir
defmodule P2 do
  def solve(text) do
    1..9_999_999
    |> Enum.find(&yeah?(text, &1))
  end

  defp yeah?(key, num) do
    for(<<byte <- :erlang.md5("#{key}#{num}")>>, do: byte)
    |> case do
      [0, 0, 0 | _] -> true
      _ -> false
    end
  end
end

P2.solve(text)
```
