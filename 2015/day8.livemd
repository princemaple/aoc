# AoC 2015 Day 8

```elixir
Mix.install([:kino])

defmodule Utils do
  def split(line, sep \\ "") do
    String.split(line, sep, trim: true)
  end

  def split_all_lines(text, sep \\ "") do
    text
    |> String.split("\n", trim: true)
    |> Enum.map(&split(&1, sep))
  end

  def to_numbers(number) when is_binary(number) do
    String.to_integer(number)
  end

  def to_numbers(numbers) when is_list(numbers) do
    Enum.map(numbers, &to_numbers/1)
  end

  def to_matrix(text, sep \\ "") do
    text
    |> split_all_lines(sep)
    |> then(fn data ->
      for {row, r} <- Enum.with_index(data), {col, c} <- Enum.with_index(row) do
        {{r, c}, col}
      end
    end)
    |> Map.new()
  end
end
```

## Setup

```elixir
import Utils
```

```elixir
input = Kino.Input.textarea("Input:")
```

```elixir
text = Kino.Input.read(input)
```

```elixir
data = split(text, "\n")
```

```elixir
original = data |> Enum.join() |> String.length()
```

## P1

```elixir
eval =
  data
  |> Enum.map(
    # CHEAT: & &1 |> Code.eval_string |> elem(0)
    &(&1
      |> String.trim("\"")
      |> String.replace(~s|\\"|, ~s|"|)
      |> String.replace(~s|\\\\|, ~s|\\|)
      |> String.replace(~r|\\x[0-9a-f]{2}|, ~s|x|))
  )
  |> Enum.join()
  |> String.length()

original - eval
```

## P2

```elixir
repr =
  data
  |> Enum.map(
    # too lazy to not cheat
    &inspect/1
  )
  |> Enum.join()
  |> String.length()

repr - original
```
